// Was not able to get the jsonschema2pojo plugin working successfully with the
// plugins block since it is not a `core` gradle plugin
//===============================================================================//
// plugins {
// 	id 'org.springframework.boot' version '2.2.1.RELEASE'
// 	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
// 	id 'java'
// 	id 'application'
//	id 'org.jsonschema2pojo.jsonschema2pojo-gradle-plugin' version '0.4.0'
// }
//===============================================================================//

buildscript {
	ext {
		springBootVersion = '2.2.1.RELEASE'
	}
	repositories { 
		jcenter() 
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
		classpath "org.springframework.boot:spring-boot-starter-validation:${springBootVersion}"

		classpath 'org.jsonschema2pojo:jsonschema2pojo-gradle-plugin:1.0.0'
	}
}

apply plugin: 'java'
apply plugin: 'application'

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

apply plugin: 'jsonschema2pojo'

group = 'com.debez'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

mainClassName = 'com.debez.consumer.ConsumerApplication'

def lombokVersion = '1.18.10'

repositories {
	mavenCentral()
	jcenter()
}

dependencies {
	// Kafka Binder
	implementation "org.springframework.cloud:spring-cloud-starter-stream-kafka:2.1.4.RELEASE"

	// Lombok
	compileOnly "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

	// Apache Commons
	implementation "commons-lang:commons-lang:2.6"

	implementation('org.springframework.boot:spring-boot-starter-web') {
		exclude module: 'spring-boot-starter-tomcat'
		// exclude group: 'org.apache.tomcat'
	}

	implementation 'org.springframework.boot:spring-boot-starter-reactor-netty:2.2.1.RELEASE'
	implementation 'org.springframework.boot:spring-boot-starter-webflux:2.2.1.RELEASE'

	implementation 'org.springframework.kafka:spring-kafka'

	testImplementation 'junit:junit:4.12'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.kafka:spring-kafka-test'
}

task removeFiles(type: Delete) {
	delete "${project.buildDir}/generated/" 
}

task moveFiles(type: Copy) {
	from "${project.buildDir}/generated/com"
	into "${sourceSets.main.java.srcDirs[0]}/com"
}

// Alias for generateJsonSchema2Pojo
task generate {
	dependsOn generateJsonSchema2Pojo, moveFiles, removeFiles

	doLast {
		println "Generated the JSON Schema from location: ${sourceSets.main.output.resourcesDir}/static"
		// Print out all files in build directory
		println fileTree("${project.buildDir}").filter { it.isFile() }.files.name		
	}
}

gradle.taskGraph.whenReady {
	graph -> if (graph.hasTask(run) || graph.hasTask(build) || graph.hasTask(test)) {
		generateJsonSchema2Pojo.enabled = false
	}
}

jsonSchema2Pojo {
	generateBuilders = true
	source = files("${sourceSets.main.output.resourcesDir}/static")
	targetDirectory = file("${project.buildDir}/generated")
	sourceType = 'json'

	targetPackage = 'com.debez.consumer.models'
	useLongIntegers = true
	includeGetters = true
	includeSetters = true
}

test {
	useJUnitPlatform()
	testLogging {
		showStandardStreams = true
	}
}

// import org.gradle.api.tasks.testing.logging.TestExceptionFormat
// import org.gradle.api.tasks.testing.logging.TestLogEvent

// tasks.withType(Test) {
//     testLogging {
//         // set options for log level LIFECYCLE
//         events TestLogEvent.FAILED,
//                TestLogEvent.PASSED,
//                TestLogEvent.SKIPPED,
//                TestLogEvent.STANDARD_OUT
//         exceptionFormat TestExceptionFormat.FULL
//         showExceptions true
//         showCauses true
//         showStackTraces true

//         // set options for log level DEBUG and INFO
//         // debug {
// 				info {
//             events TestLogEvent.STARTED,
//                    TestLogEvent.FAILED,
//                    TestLogEvent.PASSED,
//                    TestLogEvent.SKIPPED,
//                    TestLogEvent.STANDARD_ERROR,
//                    TestLogEvent.STANDARD_OUT
//             exceptionFormat TestExceptionFormat.FULL
//         }
//         // info.events = debug.events
//         // info.exceptionFormat = debug.exceptionFormat

//         afterSuite { desc, result ->
//             if (!desc.parent) { // will match the outermost suite
//                 def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
//                 def startItem = '|  ', endItem = '  |'
//                 def repeatLength = startItem.length() + output.length() + endItem.length()
//                 println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
// 						}
// 				}
// 		}
// }